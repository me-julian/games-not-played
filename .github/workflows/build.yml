name: Build

on:
  # Can be manually run or called by other workflows
  workflow_dispatch:
  workflow_call:
    # Map job outputs and workflow outputs
    outputs:
      version-tag:
        description: 'Deployment version as time string.'
        value: ${{ jobs.build.outputs.version-tag }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    outputs:
      version-tag: ${{ steps.output-version.outputs.VERSION_TAG }}

    steps:
      # Get the time
      - name: Get the time
        id: get-time
        uses: nanzm/get-time-action@v2.0
        with:
          timeZone: 8
          format: 'YYYY-MM-DD-HH-mm-ss'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install workspace dependencies
      - name: Install dependencies
        run: pnpm install

      # Build both the client and api packages
      - name: Build package sources
        run: pnpm run build
        env:
          VITE_API_URL: 'https://${{ vars.APP_DOMAIN }}/api'

      # Install dasel
      - name: Install dasel
        run: |
          curl -s -L https://github.com/TomWright/dasel/releases/download/v2.3.6/dasel_linux_amd64 > dasel
          sudo mv dasel /usr/local/bin/
          sudo chmod +x /usr/local/bin/dasel
          dasel --version

      # Update EB package docker image version
      - name: Update EB package docker image versions
        working-directory: ./elastic-beanstalk
        run: |
          dasel put -r yaml -t string -f docker-compose.yml -v '173624809884.dkr.ecr.us-east-2.amazonaws.com/games-not-played-api:${{ steps.get-time.outputs.time }}' services.api.image

      # Move static client files to EB package directory
      - name: Move client to EB package dir
        run: |
          mv ./packages/client/dist ./elastic-beanstalk/www

      # Package the EB config and client files for deployment
      - name: Zip EB app package
        working-directory: ./elastic-beanstalk
        run: |
          chmod +x build.sh; \
          ./build.sh

      # Upload the EB app package as an artifact
      - name: Upload EB app artifact
        uses: actions/upload-artifact@v4
        with:
          name: eb-app-package
          path: './elastic-beanstalk/package/games-not-played.zip'

      # Package Database Migrations
      - name: Package Sequelize Migrations
        working-directory: ./packages/api/db
        run: |
          zip -r migrations.zip . -i ./migrations/* -i ./dbConfig.js

      # Upload Database Migrations
      - name: Upload migrations package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: migrations
          path: './packages/api/db/migrations.zip'

      # Install buildx for docker/build-push-action@v4
      # Apparently this needs to stay before AWS auth
      - name: Install buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::173624809884:role/GithubActionsAutomator
          aws-region: us-east-2
          output-credentials: 'true'

      # Login to AWS ECR
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: '173624809884'
          mask-password: 'true'

      # pnpm doesn't play nice with dockerizing packages - having the
      # types workspace dependency causes errors. Get rid of all the
      # dev dependencies and use npm in image as simplest solution.
      - name: Modify api package.json for dockerization
        run: dasel delete -r json -f packages/api/package.json 'devDependencies'

      # Build and push the api image to ECR
      - name: Build and push the api image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: games-not-played-api
          IMAGE_TAG: ${{ steps.get-time.outputs.time }}
        uses: docker/build-push-action@v5
        with:
          context: ./packages/api
          platforms: linux/arm64
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # Output time of commit as version tag.
      - name: Output version tag.
        id: output-version
        run: echo "VERSION_TAG=${{ steps.get-time.outputs.time }}" >> $GITHUB_OUTPUT
